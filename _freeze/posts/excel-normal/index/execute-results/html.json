{
  "hash": "b8cdb0a84bed59bcfb06ff3cc4f63a26",
  "result": {
    "markdown": "---\ntitle: \"La curva de distribución normal en Excel\"\nsubtitle: \"Aplicando los gráficos de dispersión\"\nauthor: \"Juan Riera\"\ndate: 2023-02-19\nformat: html\nimage: \"excel-norm-11.png\"\ndraft: false\nexecute: \n  freeze: true\ncategories:\n  - estadística\n  - Excel\n  - código R\n---\n\n\nHay muchos métodos en internet para hacer el gráfico de la distribución normal con Microsoft Excel. Aquí vamos a utilizar un método sencillo mediante los gráficos de dispersión, que permite redibujar la curva para cualquier valor de la media y desviación típica, añadiendo una línea vertical en la posición de la media.\n\nEn primer lugar, estableceremos los valores de X que vamos a representar. Sabemos que la probabilidad de valores a una distancia superior a $\\pm4$ desviaciones típicas es prácticamente cero. Según esto, vamos a establecer los valores de nuestra variable a representar en el eje X entre $\\pm4\\  \\sigma$. Con un número de puntos en torno a 30 es suficiente para que la curva normal sea una curva suave.\n\nEn Excel, introducimos en la columna A una secuencia entre -4 y +4, con un incremento de 0,25. Eso nos proporciona una secuencia de 33 puntos.\n\n![](excel-norm-1.png)\n\nA continuación, colocamos en la columna B nuestros valores de media y varianza (en este caso empezaremos con una normal de media 0 y desv t 1), y, a la derecha de la serie de valores de intervalos del eje X que hemos introducido, añadimos una fórmula que nos calcula el valor X como media + n veces la desv t\n\n::: {layout-ncol=\"2\"}\n![](excel-norm-3.png)\n\n![](excel-norm-2.png)\n:::\n\nNo nos queda más que calcular el valor de la función normal que corresponde a ese valor X. Para ello, Excel dispone de la función `=DISTR.NORM(valor; media; desviación típica; acumular)`:\n\n-   *valor* será cada celda de nuestros valores X\n\n-   Introducimos en `B1` el valor de la *media*\n\n-   Introducimos en `B2` el valor de la *desviación típica*\n\n-   En el valor que hemos llamado *acumular*, introducimos `FALSO`, puesto que no queremos la función acumulada (la veremos más tarde)\n\n-   Introducimos la fórmula `=DISTR.NORM.N(B3;B$1;B$2;FALSO)` en el rango `C3:C35`\n\n![](excel-norm-4.png)\n\nPara hacer el gráfico, seleccionamos los valores de las columnas `B`y `C`que son los que vamos a representar en el gráfico\n\n![](excel-norm-5.png)\n\ny a continuación, en el `Menu`\\>`Ìnsertar`, elegimos el gráfico de dispersión con curvas suavizadas:\n\n![](excel-norm-6.png)\n\nEsto completa nuestro gráfico de la distribución normal estándar (la que tiene media = 0 y desvt = 1)\n\n![](excel-norm-7.png)\n\nComo en `B1`y `B2`tenemos los valores de la media y la desviación típica, podemos modificarlos para representar cualquier otra curva normal con otros valores de media y desviación típica; por ejemplo para un valor de media de 125 y de desvt de 2, no tenemos más que cambiar los valores en sus celdas correspondientes:\n\n![](excel-norm-8.png)\n\nPor último, vamos a añadir una línea vertical en la posición de la media. Para hacerlo, sólo necesitamos dos valores que definan los extremos de la línea, y que colocaremos en el extremo inferior del rango de datos.. Los valores de X son los de la media, y los valores de Y son cero y el valor máximo de la función, que calculamos con la fórmula `=MAX(C3:C35)`\n\n![](excel-norm-9.png)\n\nAhora vamos al gráfico y, en la opción `Seleccionar datos…`, añadimos una nueva serie, que va a estar formada sólo por estos dos valores X e Y:\n\n![](excel-norm-10.png)\n\nEditamos la línea de la nueva serie, ajustando color y tipo de línea, y completamos el gráfico:\n\n![](excel-norm-11.png)\n\n## Como hacer el gráfico en R {#como-hacer-el-gráfico-en-r}\n\nPara hacer la curva normal en `ggplot`, desde -4 $\\sigma$ hasta +4 $\\sigma$, usamos este código. Creamos el *dataframe* que vamos a dibujar directamente dentro de la propia instrucción `ggplot`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot(data.frame(x = c(-4, 4)), aes(x = x)) +\n  stat_function(fun = dnorm) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nPodemos hacer más genérico el código para que dibuje cualquier curva normal a partir de una media y ua desviación típica cualquiera, incluyendo la línea vertical al valor medio. Una alternativa es hacer una secuencia de valores X, pero realmente no los necesitamos para dibujar la curva; nos basta con la media y la desviación típica. Para calcular la escala del eje X necesitamos el valor mínimo y máximo. La función `dnorm()` de R es equivalente a la función `=DISTRIBUCION.NORMAL()` de Excel, nos devuelve los valores de densidad de la función para los valores `X` especificados. En el caso de R, al especificar esta función dentro de `ggplot`, la gráfica utiliza internamente la función para calcular la curva sin necesidad de crear los valores, como habíamos hecho en Excel.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nXmedia <- 125\nXdt <- 2\n\nXmin <- Xmedia-4*Xdt\nXmax <- Xmedia+4*Xdt\n\nYmax <- dnorm(Xmedia, Xmedia, Xdt)\n\nggplot(data.frame(X = c(Xmin, Xmax)), aes(x = X)) +\n  stat_function(fun = dnorm, args = c(Xmedia, Xdt), \n                linewidth = 1, \n                colour = \"blue\") +\n  geom_segment(aes(x = Xmedia, y = 0, xend = Xmedia, yend = Ymax), \n               linetype = \"dashed\", \n               linewidth = 1, \n               colour = \"blue\") +\n  theme_minimal() +\n  xlim(c(Xmin, Xmax))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.stats import norm\n\nXmedia = 125\nXdt = 2\n\nXmin = Xmedia - 4 * Xdt\nXmax = Xmedia + 4 * Xdt\n\nYmax = norm.pdf(Xmedia, Xmedia, Xdt)\n\nx = np.linspace(Xmin, Xmax, 100)\ny = norm.pdf(x, Xmedia, Xdt)\n\nplt.plot(x, y, linewidth=1, color='blue')\nplt.axvline(Xmedia, linestyle='dashed', linewidth=1, color='blue')\nplt.xlim(Xmin, Xmax)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(117.0, 133.0)\n```\n:::\n\n```{.python .cell-code}\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.julia .cell-code  code-fold=\"true\"}\nusing Gadfly\nusing Distributions\n\nXmedia = 125\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n125\n```\n:::\n\n```{.julia .cell-code  code-fold=\"true\"}\nXdt = 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2\n```\n:::\n\n```{.julia .cell-code  code-fold=\"true\"}\n\nXmin = Xmedia - 4 * Xdt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n117\n```\n:::\n\n```{.julia .cell-code  code-fold=\"true\"}\nXmax = Xmedia + 4 * Xdt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n133\n```\n:::\n\n```{.julia .cell-code  code-fold=\"true\"}\n\nYmax = pdf(Normal(Xmedia, Xdt), Xmedia)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.19947114020071635\n```\n:::\n\n```{.julia .cell-code  code-fold=\"true\"}\n\nx = range(Xmin, stop=Xmax, length=100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n117.0:0.16161616161616163:133.0\n```\n:::\n\n```{.julia .cell-code  code-fold=\"true\"}\ny = pdf.(Normal(Xmedia, Xdt), x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n100-element Vector{Float64}:\n 6.691511288244268e-5\n 9.214765115907646e-5\n 0.00012606902807632802\n 0.00017135493647929596\n 0.00023139230722985193\n 0.00031043114958320055\n 0.0004137573773409694\n 0.0005478861071560332\n 0.0007207736582685398\n 0.000942044905076905\n ⋮\n 0.000720773658268557\n 0.0005478861071560332\n 0.0004137573773409694\n 0.00031043114958320055\n 0.00023139230722984597\n 0.00017135493647930055\n 0.00012606902807633138\n 9.214765115907646e-5\n 6.691511288244268e-5\n```\n:::\n\n```{.julia .cell-code  code-fold=\"true\"}\n\nGadfly.plot(x=x, y=y, Geom.line, Theme(default_color=colorant\"blue\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPlot(...)\n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}